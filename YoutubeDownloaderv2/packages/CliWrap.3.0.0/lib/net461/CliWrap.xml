<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CliWrap</name>
    </assembly>
    <members>
        <member name="T:CliWrap.Buffered.BufferedCommandExtensions">
            <summary>
            Convenience extension for executing a command while buffering its streams.
            </summary>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            The result of this execution contains the standard output and standard error streams buffered in-memory as strings.
            This method can be awaited.
            </summary>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            The result of this execution contains the standard output and standard error streams buffered in-memory as strings.
            This method can be awaited.
            </summary>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandExtensions.ExecuteBufferedAsync(CliWrap.Command,System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            The result of this execution contains the standard output and standard error streams buffered in-memory as strings.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the strings from byte streams.
            This method can be awaited.
            </summary>
        </member>
        <member name="T:CliWrap.Buffered.BufferedCommandResult">
            <summary>
            Represents the result of an execution of a command, with buffered data from standard output and standard error streams.
            </summary>
        </member>
        <member name="P:CliWrap.Buffered.BufferedCommandResult.StandardOutput">
            <summary>
            Standard output data produced by the command.
            </summary>
        </member>
        <member name="P:CliWrap.Buffered.BufferedCommandResult.StandardError">
            <summary>
            Standard error data produced by the command.
            </summary>
        </member>
        <member name="M:CliWrap.Buffered.BufferedCommandResult.#ctor(System.Int32,System.DateTimeOffset,System.DateTimeOffset,System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Buffered.BufferedCommandResult"/>.
            </summary>
        </member>
        <member name="T:CliWrap.Builders.ArgumentsBuilder">
            <summary>
            Builder that helps generate a well-formed arguments string.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.String)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable,System.Globalization.CultureInfo)">
            <summary>
            Adds the specified value to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.IFormattable)">
            <summary>
            Adds the specified value to the list of arguments.
            The value is converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable},System.Globalization.CultureInfo)">
            <summary>
            Adds the specified values to the list of arguments.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Add(System.Collections.Generic.IEnumerable{System.IFormattable})">
            <summary>
            Adds the specified values to the list of arguments.
            The values are converted to string using invariant culture.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.ArgumentsBuilder.Build">
            <summary>
            Builds the resulting arguments string.
            </summary>
        </member>
        <member name="T:CliWrap.Builders.EnvironmentVariablesBuilder">
            <summary>
            Builder that helps configure environment variables.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Set(System.String,System.String)">
            <summary>
            Sets an environment variable with the specified name to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Builders.EnvironmentVariablesBuilder.Build">
            <summary>
            Builds the resulting environment variables.
            </summary>
        </member>
        <member name="T:CliWrap.Cli">
            <summary>
            Main entry point for creating new commands.
            </summary>
        </member>
        <member name="M:CliWrap.Cli.Wrap(System.String)">
            <summary>
            Creates a new command that targets the specified command line executable.
            </summary>
        </member>
        <member name="T:CliWrap.Command">
            <summary>
            Represents a shell command.
            </summary>
        </member>
        <member name="P:CliWrap.Command.TargetFilePath">
            <summary>
            File path of the executable, batch file, or script, that this command runs on.
            </summary>
        </member>
        <member name="P:CliWrap.Command.Arguments">
            <summary>
            Arguments passed on the command line.
            </summary>
        </member>
        <member name="P:CliWrap.Command.WorkingDirPath">
            <summary>
            Working directory path.
            </summary>
        </member>
        <member name="P:CliWrap.Command.EnvironmentVariables">
            <summary>
            Environment variables set for the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.Command.Validation">
            <summary>
            Configured result validation options.
            </summary>
        </member>
        <member name="P:CliWrap.Command.StandardInputPipe">
            <summary>
            Configured standard input pipe source.
            </summary>
        </member>
        <member name="P:CliWrap.Command.StandardOutputPipe">
            <summary>
            Configured standard output pipe target.
            </summary>
        </member>
        <member name="P:CliWrap.Command.StandardErrorPipe">
            <summary>
            Configured standard error pipe target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},CliWrap.CommandResultValidation,CliWrap.PipeSource,CliWrap.PipeTarget,CliWrap.PipeTarget)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Command"/>.
            </summary>
        </member>
        <member name="M:CliWrap.Command.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Command"/>.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.String)">
            <summary>
            Creates a copy of this command, setting the arguments to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.Action{CliWrap.Builders.ArgumentsBuilder})">
            <summary>
            Creates a copy of this command, setting the arguments to the value configured by the specified delegate.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a copy of this command, setting the arguments to the value obtained by formatting the specified enumeration.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithWorkingDirectory(System.String)">
            <summary>
            Creates a copy of this command, settings the working directory path to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithEnvironmentVariables(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Creates a copy of this command, setting the environment variables to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithEnvironmentVariables(System.Action{CliWrap.Builders.EnvironmentVariablesBuilder})">
            <summary>
            Creates a copy of this command, setting the environment variables to the value configured by the specified delegate.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithValidation(CliWrap.CommandResultValidation)">
            <summary>
            Creates a copy of this command, setting the validation options to the specified value.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithStandardInputPipe(CliWrap.PipeSource)">
            <summary>
            Creates a copy of this command, setting the standard input pipe to the specified source.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithStandardOutputPipe(CliWrap.PipeTarget)">
            <summary>
            Creates a copy of this command, setting the standard output pipe to the specified target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.WithStandardErrorPipe(CliWrap.PipeTarget)">
            <summary>
            Creates a copy of this command, setting the standard error pipe to the specified target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the command asynchronously.
            This method can be awaited.
            </summary>
        </member>
        <member name="M:CliWrap.Command.ToString">
            <inheritdoc />
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,CliWrap.PipeTarget)">
            <summary>
            Creates a new command that pipes its standard output to the specified target.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.IO.Stream)">
            <summary>
            Creates a new command that pipes its standard output to the specified stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.Text.StringBuilder)">
            <summary>
            Creates a new command that pipes its standard output to the specified string builder.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the string from byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.Action{System.String})">
            <summary>
            Creates a new command that pipes its standard output line-by-line to the specified delegate.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the string from byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
            Creates a new command that pipes its standard output line-by-line to the specified delegate.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the string from byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{CliWrap.PipeTarget,CliWrap.PipeTarget})">
            <summary>
            Creates a new command that pipes its standard output and standard error to the specified targets.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.IO.Stream,System.IO.Stream})">
            <summary>
            Creates a new command that pipes its standard output and standard error to the specified streams.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.Text.StringBuilder,System.Text.StringBuilder})">
            <summary>
            Creates a new command that pipes its standard output and standard error to the specified string builders.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the string from byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.Action{System.String},System.Action{System.String}})">
            <summary>
            Creates a new command that pipes its standard output and standard error line-by-line to the specified delegates.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the strings from byte streams.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,System.ValueTuple{System.Func{System.String,System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task}})">
            <summary>
            Creates a new command that pipes its standard output and standard error line-by-line to the specified delegates.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the strings from byte streams.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.PipeSource,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the specified source.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.IO.Stream,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the specified stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(System.String,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the specified string.
            Uses <see cref="P:System.Console.InputEncoding"/> to encode the string into byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.Command.op_BitwiseOr(CliWrap.Command,CliWrap.Command)">
            <summary>
            Creates a new command that pipes its standard input from the standard output of the specified other command.
            </summary>
        </member>
        <member name="T:CliWrap.CommandResult">
            <summary>
            Represents the result of an execution of a command.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.ExitCode">
            <summary>
            Exit code set by the underlying process.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.StartTime">
            <summary>
            When the command was started.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.ExitTime">
            <summary>
            When the command finished executing.
            </summary>
        </member>
        <member name="P:CliWrap.CommandResult.RunTime">
            <summary>
            Total duration of the command execution.
            </summary>
        </member>
        <member name="M:CliWrap.CommandResult.#ctor(System.Int32,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.CommandResult"/>.
            </summary>
        </member>
        <member name="T:CliWrap.CommandResultValidation">
            <summary>
            Specifies enabled validations that run on the result of command execution.
            </summary>
        </member>
        <member name="F:CliWrap.CommandResultValidation.None">
            <summary>
            No validations.
            </summary>
        </member>
        <member name="F:CliWrap.CommandResultValidation.ZeroExitCode">
            <summary>
            Ensure that the command returned a zero exit code.
            </summary>
        </member>
        <member name="T:CliWrap.CommandTask`1">
            <summary>
            Promise that represents an asynchronous execution of a command.
            </summary>
        </member>
        <member name="P:CliWrap.CommandTask`1.Task">
            <summary>
            Inner task.
            </summary>
        </member>
        <member name="P:CliWrap.CommandTask`1.ProcessId">
            <summary>
            Underlying process ID.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.#ctor(System.Threading.Tasks.Task{`0},System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.CommandTask`1"/>.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.Select``1(System.Func{`0,``0})">
            <summary>
            Lazily maps the result of the task using the specified transform.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.GetAwaiter">
            <summary>
            Gets the awaiter of the inner task.
            Used to facilitate async/await expressions on this object.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.Dispose">
            <summary>
            Disposes the inner task.
            There is no need to call this manually, unless you are not planning to await the task.
            </summary>
        </member>
        <member name="M:CliWrap.CommandTask`1.op_Implicit(CliWrap.CommandTask{`0})~System.Threading.Tasks.Task{`0}">
            <summary>
            Casts a command task into a regular task.
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.CommandEvent">
            <summary>
            Represents an abstract event produced by a command.
            Use pattern matching to handle specific instances of this type.
            Can be one of the following:
            <see cref="T:CliWrap.EventStream.StartedCommandEvent"/>,
            <see cref="T:CliWrap.EventStream.StandardOutputCommandEvent"/>,
            <see cref="T:CliWrap.EventStream.StandardErrorCommandEvent"/>,
            <see cref="T:CliWrap.EventStream.ExitedCommandEvent"/>.
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.StartedCommandEvent">
            <summary>
            Represents an event that is triggered when the command starts executing.
            This event may only appear once in the event stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.StartedCommandEvent.ProcessId">
            <summary>
            Underlying process ID.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StartedCommandEvent.#ctor(System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.StartedCommandEvent"/>.
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.StandardOutputCommandEvent">
            <summary>
            Represents an event that is triggered when the underlying process prints a line of text to the standard output stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.StandardOutputCommandEvent.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardOutputCommandEvent.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.StandardOutputCommandEvent"/>.
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.StandardErrorCommandEvent">
            <summary>
            Represents an event that is triggered when the underlying process prints a line of text to the standard error stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.StandardErrorCommandEvent.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.StandardErrorCommandEvent.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.StandardErrorCommandEvent"/>.
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.ExitedCommandEvent">
            <summary>
            Represents an event that is triggered when the command finishes executing.
            This event may only appear once in the event stream.
            </summary>
        </member>
        <member name="P:CliWrap.EventStream.ExitedCommandEvent.ExitCode">
            <summary>
            Exit code set by the underlying process.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.ExitedCommandEvent.#ctor(System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.EventStream.ExitedCommandEvent"/>.
            </summary>
        </member>
        <member name="T:CliWrap.EventStream.EventStreamCommandExtensions">
            <summary>
            Convenience extension for executing a command as an event stream.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an asynchronous event stream.
            Use <code>await foreach</code> to listen to the stream and handle command events.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an asynchronous event stream.
            Use <code>await foreach</code> to listen to the stream and handle command events.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.ListenAsync(CliWrap.Command,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an asynchronous event stream.
            Use <code>await foreach</code> to listen to the stream and handle command events.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the strings from byte streams.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Text.Encoding,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an observable event stream.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an observable event stream.
            </summary>
        </member>
        <member name="M:CliWrap.EventStream.EventStreamCommandExtensions.Observe(CliWrap.Command,System.Threading.CancellationToken)">
            <summary>
            Executes the command as an observable event stream.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the strings from byte streams.
            </summary>
        </member>
        <member name="T:CliWrap.Exceptions.CommandExecutionException">
            <summary>
            Exception thrown when the command fails to execute correctly.
            </summary>
        </member>
        <member name="M:CliWrap.Exceptions.CommandExecutionException.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CliWrap.Exceptions.CommandExecutionException"/>.
            </summary>
        </member>
        <member name="T:CliWrap.PipeSource">
            <summary>
            Abstraction that represents an inwards-facing pipe.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the binary content pushed to the pipe into the destination stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromStream(System.IO.Stream)">
            <summary>
            Creates a pipe source from a readable stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromBytes(System.Byte[])">
            <summary>
            Creates a pipe source from in-memory data.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromString(System.String,System.Text.Encoding)">
            <summary>
            Creates a pipe source from a string.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromString(System.String)">
            <summary>
            Creates a pipe source from a string.
            Uses <see cref="P:System.Console.InputEncoding"/> to encode the string into byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeSource.FromCommand(CliWrap.Command)">
            <summary>
            Creates a pipe source from the standard output of a command.
            </summary>
        </member>
        <member name="P:CliWrap.PipeSource.Null">
            <summary>
            Pipe source that pushes no data.
            </summary>
        </member>
        <member name="T:CliWrap.PipeTarget">
            <summary>
            Abstraction that represents an outwards-facing pipe.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.CopyFromAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the binary content from the stream and pushes it into the pipe.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStream(System.IO.Stream)">
            <summary>
            Creates a pipe target from a writeable stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStringBuilder(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Creates a pipe target from a string builder.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToStringBuilder(System.Text.StringBuilder)">
            <summary>
            Creates a pipe target from a string builder.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the string from byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Action{System.String},System.Text.Encoding)">
            <summary>
            Creates a pipe target from a delegate that handles the content on a line-by-line basis.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Action{System.String})">
            <summary>
            Creates a pipe target from a delegate that handles the content on a line-by-line basis.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the string from byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Func{System.String,System.Threading.Tasks.Task},System.Text.Encoding)">
            <summary>
            Creates a pipe target from a delegate that asynchronously handles the content on a line-by-line basis.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the string from byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.ToDelegate(System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
            Creates a pipe target from a delegate that asynchronously handles the content on a line-by-line basis.
            Uses <see cref="P:System.Console.OutputEncoding"/> to decode the string from byte stream.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.Merge(System.Collections.Generic.IEnumerable{CliWrap.PipeTarget})">
            <summary>
            Merges multiple pipe targets into a single one.
            Data pushed to this pipe will be replicated for all inner targets.
            </summary>
        </member>
        <member name="M:CliWrap.PipeTarget.Merge(CliWrap.PipeTarget[])">
            <summary>
            Merges multiple pipe targets into a single one.
            Data pushed to this pipe will be replicated for all inner targets.
            </summary>
        </member>
        <member name="P:CliWrap.PipeTarget.Null">
            <summary>
            Pipe target that ignores all data.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is allowed as an input even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is disallowed as an input even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
                Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
                Specifies that the method will not return if the associated <see cref="T:System.Boolean"/>
                parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
                Gets the condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
                class with the specified parameter value.
            </summary>
            <param name="parameterValue">
                The condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
                Specifies that an output may be <see langword="null"/> even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, 
                the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                 Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
                Specifies that an output is not <see langword="null"/> even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
                Specifies that the output will be non-<see langword="null"/> if the
                named parameter is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
                Gets the associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">
                The associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
                the parameter will not be <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </param>
        </member>
    </members>
</doc>
